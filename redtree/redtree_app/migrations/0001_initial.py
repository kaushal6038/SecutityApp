# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2019-09-02 12:03
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import markdownx.models
import redtree_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('activity', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Activity Logs',
            },
        ),
        migrations.CreateModel(
            name='Appliances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('appliance_ip', models.CharField(blank=True, max_length=200, null=True)),
                ('source_ip', models.CharField(blank=True, max_length=200, null=True)),
                ('network_type', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'Appliances',
            },
        ),
        migrations.CreateModel(
            name='ApplianceSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('auth_username', models.CharField(blank=True, default='test', max_length=128, null=True)),
                ('auth_password', models.CharField(blank=True, default='testpassword', max_length=128, null=True)),
                ('s3_bucket_scan_url', models.CharField(blank=True, max_length=500, null=True)),
                ('access_token', models.CharField(blank=True, default='AKIAIFYY77MPTLPF44HQ', max_length=500, null=True)),
                ('secret_access_token', models.CharField(blank=True, default='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', max_length=500, null=True)),
                ('nessus_url', models.CharField(blank=True, max_length=200, null=True)),
                ('nessus_username', models.CharField(blank=True, default='redtree', max_length=200, null=True)),
                ('nessus_password', models.CharField(blank=True, default='redtree1234!', max_length=200, null=True)),
                ('nessus_driver_url', models.CharField(blank=True, max_length=200, null=True)),
                ('max_simul_hosts', models.IntegerField(blank=True, default='500', null=True)),
                ('microservice_scan_url', models.CharField(blank=True, max_length=500, null=True)),
                ('sslyze_max_simul_hosts', models.IntegerField(blank=True, default=10, null=True)),
                ('sshyze_scan_url', models.CharField(blank=True, max_length=500, null=True)),
                ('sshyze_max_simul_hosts', models.IntegerField(blank=True, default=10, null=True)),
                ('burp_url', models.CharField(blank=True, max_length=500, null=True)),
                ('masscan_ip_address', models.CharField(blank=True, max_length=200, null=True)),
                ('masscan_ports', models.CharField(blank=True, default='1-65535', max_length=200, null=True)),
                ('masscan_maximum_hosts_per_scan', models.CharField(blank=True, default='10', max_length=200, null=True)),
                ('webscreenshot_app_url', models.CharField(blank=True, max_length=500, null=True)),
                ('dnsenum_url', models.CharField(blank=True, max_length=500, null=True)),
                ('cloudstorage_url', models.CharField(blank=True, max_length=256, null=True)),
                ('appliance', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='appliance_setting', to='redtree_app.Appliances')),
            ],
            options={
                'verbose_name_plural': 'Appliance Settings',
            },
        ),
        migrations.CreateModel(
            name='Applications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('application_url', models.CharField(blank=True, max_length=100, null=True)),
                ('application_title', models.CharField(blank=True, max_length=100, null=True)),
                ('screenshot_filename', models.CharField(blank=True, max_length=100, null=True)),
                ('screenshot_path', models.TextField(blank=True, null=True)),
                ('scope', models.CharField(blank=True, choices=[('black', 'black'), ('grey', 'grey'), ('white', 'white')], default='black', max_length=20, null=True)),
                ('network_type', models.CharField(blank=True, max_length=20, null=True)),
                ('scanning_enabled', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_scan', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Applications',
            },
        ),
        migrations.CreateModel(
            name='ApplicationVulnerability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('virtue_id', models.IntegerField(blank=True, null=True)),
                ('plugin_id', models.CharField(blank=True, max_length=500, null=True)),
                ('port', models.CharField(blank=True, max_length=200, null=True)),
                ('risk', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('banner', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('remediation', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('evidence', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('post_status', models.BooleanField(default=False)),
                ('application_scan_id', models.CharField(blank=True, max_length=700, null=True)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='application_vulnerabilities', to='redtree_app.Applications')),
            ],
            options={
                'verbose_name_plural': 'Application Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='AppNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('issue_type', models.CharField(blank=True, max_length=100, null=True)),
                ('notification_message', models.TextField(blank=True, null=True)),
                ('seen', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name_plural': 'App Notifications',
            },
        ),
        migrations.CreateModel(
            name='AwsApiGateway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('api_url', models.URLField(blank=True, max_length=300, null=True)),
                ('region', models.CharField(blank=True, max_length=56, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'aws_api_gateway',
            },
        ),
        migrations.CreateModel(
            name='AwsDomains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name_plural': 'Aws Domains',
            },
        ),
        migrations.CreateModel(
            name='AwsRdsEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=300, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=56, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'aws_rds_endpoints',
            },
        ),
        migrations.CreateModel(
            name='AwsRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ciphers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=100, null=True)),
                ('port', models.CharField(blank=True, max_length=100, null=True)),
                ('protocol', models.CharField(blank=True, max_length=100, null=True)),
                ('cipher', models.CharField(blank=True, max_length=100, null=True)),
                ('key_size', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Ciphers',
            },
        ),
        migrations.CreateModel(
            name='ClientAwsAssets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('client_aws_access_token', models.CharField(blank=True, max_length=512, null=True)),
                ('client_aws_secret_token', models.CharField(blank=True, max_length=512, null=True)),
                ('token_description', models.CharField(blank=True, max_length=25, null=True)),
                ('scan_status', models.BooleanField(default=False)),
                ('scan_state', models.CharField(blank=True, default='NotInitiated', max_length=256, null=True)),
                ('ec2_count', models.IntegerField(blank=True, null=True)),
                ('s3_count', models.IntegerField(blank=True, null=True)),
                ('rds_count', models.IntegerField(blank=True, null=True)),
                ('application_count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Client Aws Assets',
            },
        ),
        migrations.CreateModel(
            name='ClientConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('client_name', models.CharField(blank=True, max_length=500, null=True)),
                ('client_legal_name', models.CharField(blank=True, max_length=500, null=True)),
                ('mailgun_api_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('hostname', models.CharField(blank=True, max_length=500, null=True)),
                ('mailgun_base_url', models.CharField(blank=True, max_length=500, null=True)),
                ('authentication_token', models.CharField(blank=True, max_length=500, null=True)),
                ('twilio_account_sid', models.CharField(blank=True, max_length=500, null=True)),
                ('twilio_auth_key', models.CharField(blank=True, max_length=500, null=True)),
                ('twilio_account_number', models.CharField(blank=True, max_length=20, null=True)),
                ('storage_type', models.CharField(blank=True, max_length=20, null=True)),
                ('s3_access_token', models.CharField(blank=True, max_length=500, null=True)),
                ('s3_secret_access_token', models.CharField(blank=True, max_length=500, null=True)),
                ('s3_bucket_name', models.CharField(blank=True, max_length=200, null=True)),
                ('pre_signed_time_length', models.IntegerField(blank=True, null=True)),
                ('scan_frequency', models.IntegerField(blank=True, null=True)),
                ('application_status', models.BooleanField(default=False)),
                ('analytics_status', models.BooleanField(default=False)),
                ('frequency_changed', models.BooleanField(default=False)),
                ('last_scan', models.DateTimeField(blank=True, null=True)),
                ('session_timeout_length', models.IntegerField(blank=True, null=True)),
                ('manual_hours_purchased', models.CharField(blank=True, max_length=200, null=True)),
                ('manual_hours_remaining', models.CharField(blank=True, max_length=200, null=True)),
                ('max_ips', models.CharField(blank=True, max_length=200, null=True)),
                ('time_zone', models.CharField(blank=True, max_length=200, null=True)),
                ('auth_reset', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Client Configuration',
            },
        ),
        migrations.CreateModel(
            name='ClosedVulnerabilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('host', models.CharField(blank=True, max_length=100, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('risk', models.CharField(blank=True, max_length=50, null=True)),
                ('retest_note', models.TextField(blank=True, null=True)),
                ('vulnerability_id', models.IntegerField(blank=True, null=True)),
                ('closed_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-closed_date'],
                'verbose_name_plural': 'Closed Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='CloudAssetsData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(blank=True, choices=[('S3', 'S3'), ('GCS', 'GCS'), ('Azure', 'Azure')], default='S3', max_length=20, null=True)),
                ('bucket', models.CharField(blank=True, max_length=100, null=True)),
                ('source', models.CharField(blank=True, default='user', max_length=20, null=True)),
                ('last_scan', models.DateTimeField(blank=True, null=True)),
                ('aws_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aws_buckets', to='redtree_app.ClientAwsAssets')),
            ],
            options={
                'verbose_name_plural': 'Cloud Assets Data',
            },
        ),
        migrations.CreateModel(
            name='CloudstorageScanData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('authenticated_status', models.BooleanField(default=False)),
                ('unauthenticated_status', models.BooleanField(default=False)),
                ('bucket_name', models.TextField(blank=True, null=True)),
                ('file', models.TextField(blank=True, null=True)),
                ('cloud_asset_bucket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cloud_storage_scan_data', to='redtree_app.CloudAssetsData')),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name_plural': 'Cloud Storage Scan Data',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('scanning_status', models.BooleanField(default=False)),
                ('purpleleaf_auth_key', models.CharField(blank=True, max_length=500, null=True)),
                ('auth_reset', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Configurations',
            },
        ),
        migrations.CreateModel(
            name='Domains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('domain_name', models.CharField(blank=True, max_length=350, null=True)),
                ('purpleleaf_id', models.CharField(blank=True, max_length=20, null=True)),
                ('network_type', models.CharField(blank=True, max_length=56, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name_plural': 'Domains',
            },
        ),
        migrations.CreateModel(
            name='EmailRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email_type', models.CharField(blank=True, max_length=256, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('receivers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'email_record',
            },
        ),
        migrations.CreateModel(
            name='EnumeratedSubdomains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('subdomain', models.CharField(blank=True, max_length=400, null=True)),
                ('in_scope', models.BooleanField(default=False)),
                ('domain_host', models.CharField(blank=True, max_length=24, null=True)),
                ('client_confirmed', models.BooleanField(default=False)),
                ('client_confirmed_date', models.DateField(blank=True, null=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subdomains', to='redtree_app.Domains')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='EventCountHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('pl_activity', models.IntegerField(blank=True, default=0, null=True)),
                ('microservice_error', models.IntegerField(blank=True, default=0, null=True)),
                ('burp_error', models.IntegerField(blank=True, default=0, null=True)),
                ('nessus_error', models.IntegerField(blank=True, default=0, null=True)),
                ('masscan_error', models.IntegerField(blank=True, default=0, null=True)),
                ('vulnerability_found', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'activity_line_chart_record',
            },
        ),
        migrations.CreateModel(
            name='HistoricalData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('active_ips', models.CharField(blank=True, max_length=300, null=True)),
                ('open_ports', models.CharField(blank=True, max_length=300, null=True)),
                ('last_update', models.DateField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'hosts',
                'verbose_name_plural': 'Hosts',
            },
        ),
        migrations.CreateModel(
            name='IpWhoisRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('target_host', models.CharField(blank=True, max_length=300, null=True)),
                ('city', models.TextField(blank=True, null=True)),
                ('longitude', models.CharField(blank=True, max_length=256, null=True)),
                ('latitude', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'db_table': 'ip_whois_record',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceBurp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('duration', models.DateTimeField(blank=True, null=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='burp_logs', to='redtree_app.Applications')),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_burp',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceCloudstorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('bucket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cloudstorage_logs', to='redtree_app.CloudAssetsData')),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_cloudstorage',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceDnsEnum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dnsenum_logs', to='redtree_app.Domains')),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_dnsenum',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceMasscan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ips', models.TextField(blank=True, null=True)),
                ('network_type', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_masscan',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceNessus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ips', models.TextField(blank=True, null=True)),
                ('network_type', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_nessus',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceScreenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='screenshot_logs', to='redtree_app.Applications')),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_screenshot',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceSshyze',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=128, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_sshyze',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceSslyze',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=128, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_sslyze',
            },
        ),
        migrations.CreateModel(
            name='LogMicroServiceWhois',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=56, null=True)),
                ('scan_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('appliance', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('domain_host', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'log_microservice_whois',
            },
        ),
        migrations.CreateModel(
            name='NessusData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('plugin_id', models.IntegerField(blank=True, null=True)),
                ('risk', models.CharField(blank=True, max_length=100, null=True)),
                ('host', models.CharField(blank=True, max_length=200, null=True)),
                ('protocol', models.CharField(blank=True, max_length=100, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('svc_type', models.CharField(blank=True, max_length=100, null=True)),
                ('first_identified', models.CharField(blank=True, max_length=50, null=True)),
                ('last_seen', models.CharField(blank=True, max_length=50, null=True)),
                ('confirmed', models.BooleanField(default=False)),
                ('date_confirmed', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('synopsis', models.TextField(blank=True, null=True)),
                ('plugin_output', models.TextField(blank=True, null=True)),
                ('virtue_id', models.IntegerField(blank=True, null=True)),
                ('banner', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name_plural': 'Nessus Data',
            },
        ),
        migrations.CreateModel(
            name='NessusFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(blank=True, null=True, upload_to=redtree_app.models.nessus_directory_path)),
                ('file_code', models.CharField(blank=True, max_length=500, null=True)),
                ('low_risk_count', models.CharField(blank=True, max_length=100, null=True)),
                ('medium_risk_count', models.CharField(blank=True, max_length=100, null=True)),
                ('high_risk_count', models.CharField(blank=True, max_length=100, null=True)),
                ('critical_risk_count', models.CharField(blank=True, max_length=100, null=True)),
                ('low_new_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('medium_new_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('high_new_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('critical_new_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('uploaded_at', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Nessus Files',
            },
        ),
        migrations.CreateModel(
            name='NessusFileLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_type', models.CharField(blank=True, max_length=50, null=True)),
                ('issue', models.TextField(blank=True, null=True)),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('linked_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nessusfile_logs', to='redtree_app.NessusFile')),
            ],
            options={
                'verbose_name_plural': 'Nessus File Logs',
            },
        ),
        migrations.CreateModel(
            name='NessusFileRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('issues_read', models.CharField(blank=True, max_length=50, null=True)),
                ('issues_detected', models.CharField(blank=True, max_length=50, null=True)),
                ('issues_undetected', models.CharField(blank=True, max_length=50, null=True)),
                ('duplicate_issues', models.CharField(blank=True, max_length=50, null=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='redtree_app.NessusFile')),
            ],
            options={
                'verbose_name_plural': 'Nessus File Record',
            },
        ),
        migrations.CreateModel(
            name='Networks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('network', models.CharField(blank=True, max_length=100, null=True)),
                ('network_type', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'Networks',
            },
        ),
        migrations.CreateModel(
            name='NotificationEmails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Notification Emails List',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('retest_id', models.IntegerField(blank=True, null=True)),
                ('issue', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=500, null=True)),
                ('seen', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='PurpleleafEventHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(blank=True, max_length=300, null=True)),
                ('time_stamp', models.CharField(blank=True, max_length=300, null=True)),
                ('username', models.CharField(blank=True, max_length=300, null=True)),
                ('ip', models.CharField(blank=True, max_length=300, null=True)),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created'],
                'verbose_name_plural': 'Purpleleaf Event History',
            },
        ),
        migrations.CreateModel(
            name='PurpleleafUserEventHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('event_type', models.TextField(blank=True, null=True)),
                ('time_stamp', models.CharField(blank=True, max_length=300, null=True)),
                ('username', models.CharField(blank=True, max_length=300, null=True)),
                ('ip', models.CharField(blank=True, max_length=300, null=True)),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created'],
                'verbose_name_plural': 'PurpleleafUser Event History',
            },
        ),
        migrations.CreateModel(
            name='PurpleleafUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('user_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('user_name', models.CharField(blank=True, max_length=30, null=True)),
                ('purpleleaf_id', models.CharField(blank=True, max_length=30, null=True)),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Purpleleaf Users',
            },
        ),
        migrations.CreateModel(
            name='RedtreeEventHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(blank=True, max_length=300, null=True)),
                ('time_stamp', models.CharField(blank=True, max_length=300, null=True)),
                ('username', models.CharField(blank=True, max_length=300, null=True)),
                ('ip', models.CharField(blank=True, max_length=300, null=True)),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created'],
                'verbose_name_plural': 'Redtree Event History',
            },
        ),
        migrations.CreateModel(
            name='RedtreeUserEventHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('event_type', models.TextField(blank=True, null=True)),
                ('time_stamp', models.CharField(blank=True, max_length=300, null=True)),
                ('username', models.CharField(blank=True, max_length=300, null=True)),
                ('ip', models.CharField(blank=True, max_length=300, null=True)),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created'],
                'verbose_name_plural': 'RedtreeUser Event History',
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to=redtree_app.models.report_directory_path)),
                ('network_type', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name_plural': 'Reports',
            },
        ),
        migrations.CreateModel(
            name='RetestNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('vul_id', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'Retest Notes',
            },
        ),
        migrations.CreateModel(
            name='RetestVulnerabilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('issue_id', models.CharField(blank=True, max_length=10, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('host', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Retest Vulnerability',
            },
        ),
        migrations.CreateModel(
            name='RiskHistoricalData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('critical_risk', models.CharField(blank=True, max_length=300, null=True)),
                ('high_risk', models.CharField(blank=True, max_length=300, null=True)),
                ('medium_risk', models.CharField(blank=True, max_length=300, null=True)),
                ('low_risk', models.CharField(blank=True, max_length=300, null=True)),
                ('last_update', models.DateField(auto_now=True)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='S3Uploads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('filename', models.CharField(blank=True, max_length=100, null=True)),
                ('key', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestVulnerabilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('virtue_id', models.IntegerField(blank=True, null=True)),
                ('plugin_id', models.CharField(blank=True, max_length=500, null=True)),
                ('port', models.CharField(blank=True, max_length=200, null=True)),
                ('host_ip', models.CharField(blank=True, max_length=700, null=True)),
                ('risk', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('banner', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('remediation', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('evidence', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('post_status', models.BooleanField(default=False)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host_test_vulnerability', to='redtree_app.Host')),
                ('nessus_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='redtree_app.NessusData')),
            ],
            options={
                'verbose_name_plural': 'Test Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='UserHosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('host', models.CharField(blank=True, max_length=500, null=True)),
                ('host_type', models.CharField(blank=True, max_length=100, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('aws_existence', models.BooleanField(default=False)),
                ('service', models.CharField(blank=True, max_length=100, null=True)),
                ('source', models.CharField(blank=True, default='user', max_length=20, null=True)),
                ('owner', models.CharField(blank=True, max_length=100, null=True)),
                ('host_network_type', models.CharField(blank=True, max_length=10, null=True)),
                ('aws_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_aws_hosts', to='redtree_app.ClientAwsAssets')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_hosts', to='redtree_app.Networks')),
            ],
            options={
                'db_table': 'user_hosts',
                'verbose_name_plural': 'User Hosts',
            },
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('virtue_id', models.IntegerField(blank=True, null=True)),
                ('plugin_id', models.CharField(blank=True, max_length=500, null=True)),
                ('host_ip', models.CharField(blank=True, max_length=500, null=True)),
                ('port', models.CharField(blank=True, max_length=200, null=True)),
                ('risk', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('banner', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('remediation', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('evidence', markdownx.models.MarkdownxField(blank=True, null=True)),
                ('post_status', models.BooleanField(default=False)),
                ('masscan_post_status', models.BooleanField(default=False)),
                ('network_type', models.CharField(blank=True, max_length=500, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host_vulnerability', to='redtree_app.Host')),
            ],
            options={
                'verbose_name_plural': 'Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='WhoisBasicRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('asn_id', models.CharField(blank=True, max_length=300, null=True)),
                ('asn_description', models.TextField(blank=True, null=True)),
                ('handle', models.CharField(blank=True, max_length=300, null=True)),
                ('network_name', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'whois_basic_record',
            },
        ),
        migrations.CreateModel(
            name='WhoisNetEventsRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('action', models.TextField(blank=True, null=True)),
                ('actor', models.TextField(blank=True, null=True)),
                ('timestamp', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_nets_events_records',
            },
        ),
        migrations.CreateModel(
            name='WhoisNetLinksRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('links', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_nets_links_records',
            },
        ),
        migrations.CreateModel(
            name='WhoisNetNoticesRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('links', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_nets_notices_records',
            },
        ),
        migrations.CreateModel(
            name='WhoisNetsEmailsRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_nets_email_records',
            },
        ),
        migrations.CreateModel(
            name='WhoisNetsRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('handle', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('postal_code', models.TextField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('cidr', models.TextField(blank=True, null=True)),
                ('city', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('created', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('state', models.TextField(blank=True, null=True)),
                ('ranges', models.TextField(blank=True, null=True)),
                ('updated', models.TextField(blank=True, null=True)),
                ('end_address', models.TextField(blank=True, null=True)),
                ('ip_version', models.TextField(blank=True, null=True)),
                ('parent_handle', models.TextField(blank=True, null=True)),
                ('start_address', models.TextField(blank=True, null=True)),
                ('net_type', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_nets_records',
            },
        ),
        migrations.CreateModel(
            name='WhoisRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('domain_host', models.CharField(blank=True, max_length=300, null=True)),
                ('asn', models.TextField(blank=True, null=True)),
                ('raw', models.TextField(blank=True, null=True)),
                ('asn_registry', models.TextField(blank=True, null=True)),
                ('asn_country_code', models.TextField(blank=True, null=True)),
                ('asn_date', models.TextField(blank=True, null=True)),
                ('asn_cidr', models.TextField(blank=True, null=True)),
                ('raw_referral', models.TextField(blank=True, null=True)),
                ('nir', models.TextField(blank=True, null=True)),
                ('query', models.TextField(blank=True, null=True)),
                ('referral', models.TextField(blank=True, null=True)),
                ('asn_description', models.TextField(blank=True, null=True)),
                ('city', models.TextField(blank=True, null=True)),
                ('longitude', models.CharField(blank=True, max_length=256, null=True)),
                ('latitude', models.CharField(blank=True, max_length=256, null=True)),
                ('ip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois', to='redtree_app.UserHosts')),
            ],
            options={
                'ordering': ['-id'],
                'db_table': 'whois_records',
            },
        ),
        migrations.AddField(
            model_name='whoisnetsrecord',
            name='whois_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_nets', to='redtree_app.WhoisRecord'),
        ),
        migrations.AddField(
            model_name='whoisnetsemailsrecord',
            name='whois_net',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_net_emails', to='redtree_app.WhoisNetsRecord'),
        ),
        migrations.AddField(
            model_name='whoisnetnoticesrecord',
            name='whois_net',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_net_notices', to='redtree_app.WhoisNetsRecord'),
        ),
        migrations.AddField(
            model_name='whoisnetlinksrecord',
            name='whois_net',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_net_links', to='redtree_app.WhoisNetsRecord'),
        ),
        migrations.AddField(
            model_name='whoisneteventsrecord',
            name='whois_net',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_net_events', to='redtree_app.WhoisNetsRecord'),
        ),
        migrations.AlterUniqueTogether(
            name='whoisbasicrecord',
            unique_together=set([('asn_id', 'asn_description', 'network_name')]),
        ),
        migrations.AddField(
            model_name='retestvulnerabilities',
            name='vulnerability',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='retest', to='redtree_app.Vulnerability'),
        ),
        migrations.AddField(
            model_name='retestnote',
            name='vulnerability',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retest_notes', to='redtree_app.Vulnerability'),
        ),
        migrations.AddField(
            model_name='nessusdata',
            name='linked_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='redtree_app.NessusFile'),
        ),
        migrations.AddField(
            model_name='nessusdata',
            name='user_host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_host_issues', to='redtree_app.UserHosts'),
        ),
        migrations.AddField(
            model_name='logmicroservicewhois',
            name='host',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='whois_logs', to='redtree_app.UserHosts'),
        ),
        migrations.AddField(
            model_name='ipwhoisrecord',
            name='ip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ip_whois', to='redtree_app.UserHosts'),
        ),
        migrations.AddField(
            model_name='ipwhoisrecord',
            name='whois_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='whois_record', to='redtree_app.WhoisBasicRecord'),
        ),
        migrations.AddField(
            model_name='host',
            name='user_host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_host', to='redtree_app.UserHosts'),
        ),
        migrations.AddField(
            model_name='cloudassetsdata',
            name='network',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='network_buckets', to='redtree_app.Networks'),
        ),
        migrations.AddField(
            model_name='awsrdsendpoint',
            name='asset_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rds_endpoints', to='redtree_app.ClientAwsAssets'),
        ),
        migrations.AddField(
            model_name='awsdomains',
            name='aws_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aws_domains', to='redtree_app.ClientAwsAssets'),
        ),
        migrations.AddField(
            model_name='awsapigateway',
            name='asset_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aws_gateway_api', to='redtree_app.ClientAwsAssets'),
        ),
        migrations.AddField(
            model_name='applications',
            name='host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_host_applications', to='redtree_app.UserHosts'),
        ),
    ]
