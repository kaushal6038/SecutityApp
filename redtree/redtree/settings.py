"""
Django settings for redtree project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from __future__ import absolute_import
import os
import sentry_sdk
from celery.schedules import crontab
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.redis import RedisIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'v-+ckv^hv$=le2i-so!$z!p4+nv8t3s#f*qp#siej4xg($!gw^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'redtree_app',
    'nessus',
    'private',
    'playground',
    'utils',
    'rest_framework',
    'django_markup',
    'markdownx',
    'django_celery_beat',
    'django_crontab',
    'raven.contrib.django.raven_compat'
]

MARKDOWNX_MARKDOWN_EXTENSIONS = ['markdown.extensions.extra']

LOGIN_URL = '/user-login'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'redtree_app.middleware.TimezoneMiddleware',
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    'redtree_app.middleware.CurrentUserMiddleware',
    'redtree_app.middleware.VariablesCheckMiddleware',
]

ROOT_URLCONF = 'redtree.urls'

# RAVEN_CONFIG = {
#     'dsn':"https://ddd0537a8caf424b9dab455807c5dc9c@sentry.io/1369209",
# }

sentry_sdk.init(
    dsn="https://ddd0537a8caf424b9dab455807c5dc9c@sentry.io/1369209",
    integrations=[DjangoIntegration(), CeleryIntegration(), RedisIntegration()],
    send_default_pii=True
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'redtree_app.context_processors.count_test_vulnerability',
                'redtree_app.context_processors.get_branch_name'
            ],
        },
    },
]


WSGI_APPLICATION = 'redtree.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('RT_RDS_DB_NAME', ''),
        'USER': os.environ.get('RDS_USERNAME', ''),
        'PASSWORD': os.environ.get('RDS_PASSWORD', ''),
        'HOST': os.environ.get('RDS_HOSTNAME', ''),
        'PORT': os.environ.get('5432', ''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Cancun'

USE_I18N = True

USE_L10N = True

USE_TZ = True


MARKDOWNX_MARKDOWN_EXTENSIONS = [
    'markdown.extensions.extra'
]

MARKDOWNX_IMAGE_MAX_SIZE = {
    'size': (2080, 1542),
    'quality': 90,
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MARKDOWNX_MEDIA_PATH = 'screenshots/'

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
# ]

# celery configrations
REDIS_URL = "redis://{host}:{port}/1".format(
    host=os.getenv('RT_REDIS_HOST', 'localhost'),
    port=os.getenv('REDIS_PORT', '6379')
)

CELERY_BROKER_URL=REDIS_URL
CELERY_RESULT_BACKEND=REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULE = {
    'run-scan': {
        'task': 'redtree_app.tasks.run_scan',
        'schedule': crontab(hour=0, minute=15),
    },
    'update-nessus-status': {
        'task': 'redtree_app.tasks.update_nessus_status',
        'schedule': 2700,
    },
    'run-masscan': {
        'task': 'redtree_app.tasks.run_masscan',
        'schedule': crontab(hour=5, minute=55),
    },
    'sslyze-cipher': {
        'task': 'redtree_app.tasks.sslyze_cipher',
        'schedule': crontab(hour=6, minute=30),
    },
    'sshyze-cipher': {
        'task': 'redtree_app.tasks.sshyze_cipher',
        'schedule': crontab(hour=7, minute=14),
    },
    'pl-historical-data': {
        'task': 'redtree_app.tasks.pl_historical_data',
        'schedule': crontab(hour=0, minute=0),
    },
    'burp': {
        'task': 'redtree_app.tasks.generate_application_scan',
        'schedule': crontab(hour=18, minute=0),
    },
    'send-mail-everyweek': {
        'task': 'redtree_app.tasks.send_mail_everyweek',
        'schedule': crontab(minute=0, hour=12, day_of_week='sun'),
    },
    'domain-enum': {
        'task': 'redtree_app.tasks.domain_enum',
        'schedule': crontab(minute=0, hour=9),
    },
    'screenshot': {
        'task': 'redtree_app.tasks.application_screenshot_generator',
        'schedule': crontab(hour=4, minute=0)
    },
    'cloudstorage': {
        'task': 'redtree_app.tasks.cloudstorage_s3_bucket_scan',
        'schedule': crontab(hour=2, minute=0),
    },
    'whois': {
        'task': 'redtree_app.tasks.whois_scan',
        'schedule': crontab(hour=3, minute=0),
    },
    'activity-history': {
        'task': 'redtree_app.tasks.generate_line_chart_record',
        'schedule': crontab(hour=0, minute=2),
    },
    'sourceip': {
        'task': 'redtree_app.tasks.get_source_ip',
        'schedule': crontab(minute=10, hour='*'), #runs every hour.
    },
    'asset-refresh': {
        'task': 'redtree_app.tasks.refresh_aws_asset_status',
        'schedule': crontab(minute=10, hour=10), #runs every hour.
    },
    'api-gateway': {
            'task': 'redtree_app.tasks.api_gateway_scan',
            'schedule': crontab(minute=0, hour=0, day_of_week='MON'),  # Every Monday.
    },
    'generate-report': {
        'task': 'redtree_app.tasks.generate_monthly_pdf',
        'schedule': crontab(0, 0, day_of_month='1'),
    },

}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "example"
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s  %(asctime)s  %(module)s '
                      '%(process)d  %(thread)d  %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR', # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

